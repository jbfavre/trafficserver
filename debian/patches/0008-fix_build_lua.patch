Index: trafficserver/lib/bindings/bindings.h
===================================================================
--- trafficserver.orig/lib/bindings/bindings.h	2018-01-21 13:07:25.657381909 +0100
+++ trafficserver/lib/bindings/bindings.h	2018-01-21 13:07:25.653381896 +0100
@@ -62,7 +62,7 @@
   static BindingInstance *self(lua_State *);
 
   // Register a Lua metatable for a custom type.
-  static void register_metatable(lua_State *, const char *, const luaL_reg *);
+  static void register_metatable(lua_State *, const char *, const luaL_Reg *);
 
   lua_State *lua;
 
Index: trafficserver/lib/bindings/metrics.cc
===================================================================
--- trafficserver.orig/lib/bindings/metrics.cc	2018-01-21 13:07:25.657381909 +0100
+++ trafficserver/lib/bindings/metrics.cc	2018-01-21 13:07:25.653381896 +0100
@@ -196,7 +196,7 @@
 void
 lua_metrics_register(lua_State *L)
 {
-  static const luaL_reg metatable[] = {
+  static const luaL_Reg metatable[] = {
     {"__gc", metrics_gc}, {"__index", metrics_index}, {"__newindex", metrics_newindex}, {nullptr, nullptr},
   };
 
Index: trafficserver/lib/bindings/bindings.cc
===================================================================
--- trafficserver.orig/lib/bindings/bindings.cc	2018-01-21 13:07:25.657381909 +0100
+++ trafficserver/lib/bindings/bindings.cc	2018-01-21 13:07:25.653381896 +0100
@@ -327,7 +327,7 @@
 }
 
 void
-BindingInstance::register_metatable(lua_State *lua, const char *name, const luaL_reg *metatable)
+BindingInstance::register_metatable(lua_State *lua, const char *name, const luaL_Reg *metatable)
 {
   // Create a metatable, adding it to the Lua registry.
   luaL_newmetatable(lua, name);
Index: trafficserver/proxy/logging/LogBindings.cc
===================================================================
--- trafficserver.orig/proxy/logging/LogBindings.cc	2018-01-21 13:07:25.657381909 +0100
+++ trafficserver/proxy/logging/LogBindings.cc	2018-01-21 13:07:25.653381896 +0100
@@ -179,7 +179,7 @@
   if (lua_istable(L, value)) {
     lua_scoped_stack saved(L);
 
-    int count   = luaL_getn(L, value);
+    int count   = lua_objlen(L, value);
     LogHost *lh = nullptr;
 
     saved.push_value(value); // Push the table to -1.
@@ -257,7 +257,7 @@
   if (lua_istable(L, value)) {
     lua_scoped_stack saved(L);
     LogFilter *filter;
-    int count = luaL_getn(L, value);
+    int count = lua_objlen(L, value);
 
     saved.push_value(value); // Push the table to -1.
 
@@ -391,7 +391,7 @@
 bool
 MakeLogBindings(BindingInstance &binding, LogConfig *conf)
 {
-  static const luaL_reg metatable[] = {
+  static const luaL_Reg metatable[] = {
     {"__gc", refcount_object_gc}, {nullptr, nullptr},
   };
 
