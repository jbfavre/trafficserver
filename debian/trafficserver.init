#! /bin/sh

### BEGIN INIT INFO
# Provides:          trafficserver
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: init script for the Apache Traffic Server
# Description:       Apache Traffic Server is fast, scalable and extensible
#                    HTTP/1.1 compliant caching proxy server.
### END INIT INFO

# Author: Arno Toell <debian@toell.net>
#
# This init script is derived from the source package's version shipped 
# along the source tarball as rc/trafficserver. Therefore it is a derivate
# work and licensed as follows:
#
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Apache Traffic Server"
NAME=trafficserver
SCRIPTNAME=/etc/init.d/$NAME

ESED=/usr/bin/sed
test -x $ESED || ESED=sed
TS_PREFIX="/usr"
TS_ROOT=${TS_ROOT:-$TS_PREFIX}
# TS_BASE is offset inside the file system from where the layout starts
# For standard installations TS_BASE will be empty
eval TS_BASE="`echo $TS_ROOT | ${ESED} -e 's;/usr$;;'`"


RUNDIR=${RUNDIR:-$TS_BASE/var/run/trafficserver}

TC_START=${TC_START:-no}
TC_NAME=${TC_NAME:-traffic_cop}
TC_DAEMON=${TC_DAEMON:-$TS_BASE/usr/bin/traffic_cop}
TC_DAEMON_ARGS=""
TC_PIDFILE=${TC_PIDFILE:-$RUNDIR/cop.lock}


TM_START=${TM_START:-no}
TM_NAME=${TM_NAME:-traffic_manager}
TM_DAEMON=${TM_DAEMON:-$TS_BASE/usr/bin/traffic_manager}
TM_DAEMON_ARGS=""
TM_PIDFILE=${TM_PIDFILE:-$RUNDIR/manager.lock}

TS_START=${TS_START:-no}
TS_NAME=${TS_NAME:-traffic_server}
TS_DAEMON=${TS_DAEMON:-$TS_BASE/usr/bin/traffic_server}
TS_DAEMON_ARGS=""
TS_PIDFILE=${TS_PIDFILE:-$RUNDIR/server.lock}


# Exit if the package is not installed
[ -x "$TC_DAEMON" ] || exit 0

# Make sure $RUNDIR exists as the underlying file system
# may be volatile (see ยง 9.3.2 from DPM)
[ ! -d $RUNDIR ] || install -d -o trafficserver -g trafficserver -m 0755 "$RUNDIR"

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

start_cmd()
{
	# Args
	DAEMON=$1
	DAEMON_ARGS=$2
	PID=$3
	
	#echo "\n\n"
	#echo "d:" $DAEMON
	#echo "da:" $DAEMON_ARGS
	#echo "pid:" $PID

	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet --pidfile $PID --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet --background --pidfile $PID --exec $DAEMON -- \
		$DAEMON_ARGS \
		|| return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

stop_cmd()
{
	NAME=$1
	DAEMON=$2
	PID=$3

	#echo "\n\n"
	#echo $NAME
	#echo $DAEMON
	#echo $PID

	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PID --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PID
	return "$RETVAL"
}

do_start() {

	if [ "x$TC_START" != "xno" ]; then
		[ "$VERBOSE" != no ] && log_daemon_msg "\t$TC_NAME"
		start_cmd "$TC_DAEMON" "$TC_DAEMON_ARGS" "$TC_PIDFILE"
		case "$?" in
			0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
			  2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		esac
	fi

	## Starting TS and TM is usually not needed as TC takes care!


	if [ "x$TM_START" != "xno" ]; then
		[ "$VERBOSE" != no ] && log_daemon_msg "\t$TM_NAME"
		start_cmd "$TM_DAEMON" "$TM_DAEMON_ARGS" "$TM_PIDFILE"
		case "$?" in
			0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
			  2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		esac
	fi


	if [ "x$TS_START" != "xno" ]; then
		[ "$VERBOSE" != no ] && log_daemon_msg "\ลง$TS_NAME"
		start_cmd "$TS_DAEMON" "$TS_DAEMON_ARGS" "$TS_PIDFILE"
		case "$?" in
			0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
			  2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		esac

	fi


}


do_stop() {
	[ "$VERBOSE" != no ] && log_daemon_msg "\t$TC_NAME"
	stop_cmd "$TC_NAME" "$TC_DAEMON" "$TC_PIDFILE"
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac


	
	[ "$VERBOSE" != no ] && log_daemon_msg "\t$TM_NAME"
	stop_cmd "$TM_NAME" "$TM_DAEMON" "$TM_PIDFILE"
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac


	[ "$VERBOSE" != no ] && log_daemon_msg "\t$TS_NAME"
	stop_cmd "$TS_NAME" "$TS_DAEMON" "$TS_PIDFILE"
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME\n"
	do_start
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME\n"
	do_stop
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME\n"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
